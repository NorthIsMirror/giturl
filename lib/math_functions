setopt typesetsilent

local -a characters
characters=( 0 1 2 3 4 5 6 7 8 9 a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z

# Latin-1 Supplement [µºÀ-ÖØ-áãäæ-öøú-ÿ]
µ º À Á Â Ã Ä Å Æ Ç È É Ê Ë Ì Í Î Ï Ð Ñ Ò Ó Ô Õ Ö Ø Ù Ú Û Ü Ý Þ ß à á ã ä æ ç è é ê ë ì í î ï ð ñ ò ó ô õ ö ø ú û ü ý þ ÿ

# Latin Extended-A [ÿ-ſ]
Ā ā Ă ă Ą ą Ć ć Ĉ ĉ Ċ ċ Č č Ď ď Đ đ Ē ē Ĕ ĕ Ė ė Ę ę Ě ě Ĝ ĝ Ğ ğ Ġ ġ Ģ ģ Ĥ ĥ Ħ ħ Ĩ ĩ Ī ī Ĭ ĭ Į į İ ı Ĳ ĳ Ĵ ĵ Ķ ķ ĸ Ĺ ĺ Ļ ļ Ľ ľ Ŀ ŀ Ł ł Ń ń
Ņ ņ Ň ň ŉ Ŋ ŋ Ō ō Ŏ ŏ Ő ő Œ œ Ŕ ŕ Ŗ ŗ Ř ř Ś ś Ŝ ŝ Ş ş Š š Ţ ţ Ť ť Ŧ ŧ Ũ ũ Ū ū Ŭ ŭ Ů ů Ű ű Ų ų Ŵ ŵ Ŷ ŷ Ÿ Ź ź Ż ż Ž ž ſ

# Latin Extended-B [ſ-ǃǍ-Ǳǳ-Ɉɋ-ɏ]
ƀ Ɓ Ƃ ƃ Ƅ ƅ Ɔ Ƈ ƈ Ɖ Ɗ Ƌ ƌ ƍ Ǝ Ə Ɛ Ƒ ƒ Ɠ Ɣ ƕ Ɩ Ɨ Ƙ ƙ ƚ ƛ Ɯ Ɲ ƞ Ɵ Ơ ơ Ƣ ƣ Ƥ ƥ Ʀ Ƨ ƨ Ʃ ƪ ƫ Ƭ ƭ Ʈ Ư ư Ʊ Ʋ Ƴ ƴ Ƶ ƶ Ʒ Ƹ ƹ ƺ ƻ Ƽ ƽ
ƾ ƿ ǀ ǁ ǂ ǃ Ǎ ǎ Ǐ ǐ Ǒ ǒ Ǔ ǔ Ǖ ǖ Ǘ ǘ Ǚ ǚ Ǜ ǜ ǝ Ǟ ǟ Ǡ ǡ Ǣ ǣ Ǥ ǥ Ǧ ǧ Ǩ ǩ Ǫ ǫ Ǭ ǭ Ǯ ǯ ǰ Ǳ ǳ Ǵ ǵ Ƕ Ƿ Ǹ ǹ Ǻ ǻ Ǽ ǽ Ǿ ǿ Ȁ ȁ Ȃ ȃ Ȅ ȅ
Ȇ ȇ Ȉ ȉ Ȋ ȋ Ȍ ȍ Ȏ ȏ Ȑ ȑ Ȓ ȓ Ȕ ȕ Ȗ ȗ Ș ș Ț ț Ȝ ȝ Ȟ ȟ Ƞ ȡ Ȣ ȣ Ȥ ȥ Ȧ ȧ Ȩ ȩ Ȫ ȫ Ȭ ȭ Ȯ ȯ Ȱ ȱ Ȳ ȳ ȴ ȵ ȶ ȷ ȸ ȹ Ⱥ Ȼ ȼ Ƚ Ⱦ ȿ ɀ Ɂ ɂ Ƀ
Ʉ Ʌ Ɇ ɇ Ɉ ɋ Ɍ ɍ Ɏ ɏ

# Latin Extended Additional [Ḁ-ẝẟ-ỹỻ]
Ḁ ḁ Ḃ ḃ Ḅ ḅ Ḇ ḇ Ḉ ḉ Ḋ ḋ Ḍ ḍ Ḏ ḏ Ḑ ḑ Ḓ ḓ Ḕ ḕ Ḗ ḗ Ḙ ḙ Ḛ ḛ Ḝ ḝ Ḟ ḟ Ḡ ḡ Ḣ ḣ Ḥ ḥ Ḧ ḧ Ḩ ḩ Ḫ ḫ Ḭ ḭ Ḯ ḯ Ḱ ḱ Ḳ ḳ Ḵ
ḵ Ḷ ḷ Ḹ ḹ Ḻ ḻ Ḽ ḽ Ḿ ḿ Ṁ ṁ Ṃ ṃ Ṅ ṅ Ṇ ṇ Ṉ ṉ Ṋ ṋ Ṍ ṍ Ṏ ṏ Ṑ ṑ Ṓ ṓ Ṕ ṕ Ṗ ṗ Ṙ ṙ Ṛ ṛ Ṝ ṝ Ṟ ṟ Ṡ ṡ Ṣ ṣ Ṥ ṥ Ṧ ṧ Ṩ ṩ
Ṫ ṫ Ṭ ṭ Ṯ ṯ Ṱ ṱ Ṳ ṳ Ṵ ṵ Ṷ ṷ Ṹ ṹ Ṻ ṻ Ṽ ṽ Ṿ ṿ Ẁ ẁ Ẃ ẃ Ẅ ẅ Ẇ ẇ Ẉ ẉ Ẋ ẋ Ẍ ẍ Ẏ ẏ Ẑ ẑ Ẓ ẓ Ẕ ẕ ẖ ẗ ẘ ẙ ẚ ẛ ẜ ẝ ẟ
Ạ ạ Ả ả Ấ ấ Ầ ầ Ẩ ẩ Ẫ ẫ Ậ ậ Ắ ắ Ằ ằ Ẳ ẳ Ẵ ẵ Ặ ặ Ẹ ẹ Ẻ ẻ Ẽ ẽ Ế ế Ề ề Ể ể Ễ ễ Ệ ệ Ỉ ỉ Ị ị Ọ ọ Ỏ ỏ Ố ố Ồ ồ Ổ
ổ Ỗ ỗ Ộ ộ Ớ ớ Ờ ờ Ở ở Ỡ ỡ Ợ ợ Ụ ụ Ủ ủ Ứ ứ Ừ ừ Ử ử Ữ ữ Ự ự Ỳ ỳ Ỵ ỵ Ỷ ỷ Ỹ ỹ ỻ

# Greek and Coptic [ͻ-ͽΆΈΑ-ΡΣ-ΩΫ-ψϋ-ώϐ-ϒϔ-Ϡϥϧ-ϩϫ-ϲϵϷ-Ϲϻ-Ͽ]
ͻ ͼ ͽ Ά Έ Α Β Γ Δ Ε Ζ Η Θ Ι Κ Λ Μ Ν Ξ Ο Π Ρ Σ Τ Υ Φ Χ Ψ Ω Ϋ ά έ ή ί ΰ α β γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ ς
σ τ υ φ χ ψ ϋ ό ύ ώ ϐ ϑ ϒ ϔ ϕ ϖ ϗ Ϙ ϙ Ϛ ϛ Ϝ ϝ Ϟ ϟ Ϡ ϥ ϧ Ϩ ϩ ϫ Ϭ ϭ Ϯ ϯ ϰ ϱ ϲ ϵ Ϸ ϸ Ϲ ϻ ϼ Ͻ Ͼ Ͽ

# Cyrillic [Ѐ-џѡ-ѣѥ-ѧѪѫѰ-ѷѻѽѿ-ҁҋ-ҥҩ-ҳҵ-һӀ-ӌӎӐ-ӿ]
Ѐ Ё Ђ Ѓ Є Ѕ І Ї Ј Љ Њ Ћ Ќ Ѝ Ў Џ А Б В Г Д Е Ж З И Й К Л М Н О П Р С Т У Ф Х Ц Ч Ш Щ Ъ Ы Ь Э Ю Я а б в г д
е ж з и й к л м н о п р с т у ф х ц ч ш щ ъ ы ь э ю я ѐ ё ђ ѓ є ѕ і ї ј љ њ ћ ќ ѝ ў џ ѡ Ѣ ѣ ѥ Ѧ ѧ Ѫ ѫ Ѱ ѱ
Ѳ ѳ Ѵ ѵ Ѷ ѷ ѻ ѽ ѿ Ҁ ҁ ҋ Ҍ ҍ Ҏ ҏ Ґ ґ Ғ ғ Ҕ ҕ Җ җ Ҙ ҙ Қ қ Ҝ ҝ Ҟ ҟ Ҡ ҡ Ң ң Ҥ ҥ ҩ Ҫ ҫ Ҭ ҭ Ү ү Ұ ұ Ҳ ҳ ҵ Ҷ ҷ Ҹ
ҹ Һ һ Ӏ Ӂ ӂ Ӄ ӄ Ӆ ӆ Ӈ ӈ Ӊ ӊ Ӌ ӌ ӎ Ӑ ӑ Ӓ ӓ Ӕ ӕ Ӗ ӗ Ә ә Ӛ ӛ Ӝ ӝ Ӟ ӟ Ӡ ӡ Ӣ ӣ Ӥ ӥ Ӧ ӧ Ө ө Ӫ ӫ Ӭ ӭ Ӯ ӯ Ӱ ӱ Ӳ ӳ
Ӵ ӵ Ӷ ӷ Ӹ ӹ Ӻ ӻ Ӽ ӽ Ӿ ӿ

# Hebrew [א-דטך-מס-שװ] / [א-ד]
א ב ג ד ט ך כ ל ם מ ס ע ף פ ץ צ ק ר ש װ

# Character class for all: [0-9a-zA-ZµºÀ-ÖØ-áãäæ-öøú-ǃǍ-Ǳǳ-Ɉɋ-ɏḀ-ẝẟ-ỹỻͻ-ͽΆΈΑ-ΡΣ-ΩΫ-ψϋ-ώϐ-ϒϔ-Ϡϥϧ-ϩϫ-ϲϵϷ-Ϲϻ-ϿЀ-џѡ-ѣѥ-ѧѪѫѰ-ѷѻѽѿ-ҁҋ-ҥҩ-ҳҵ-һӀ-ӌӎӐ-ӿא-ד]
)

local -A characters_map
characters_map=(
0 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 a 10 b 11 c 12 d 13 e 14 f 15 g 16
h 17 i 18 j 19 k 20 l 21 m 22 n 23 o 24 p 25 q 26 r 27 s 28 t 29 u 30 v 31 w 32 x 33
y 34 z 35 A 36 B 37 C 38 D 39 E 40 F 41 G 42 H 43 I 44 J 45 K 46 L 47 M 48 N 49 O 50
P 51 Q 52 R 53 S 54 T 55 U 56 V 57 W 58 X 59 Y 60 Z 61 µ 62 º 63 À 64 Á 65 Â 66 Ã 67
Ä 68 Å 69 Æ 70 Ç 71 È 72 É 73 Ê 74 Ë 75 Ì 76 Í 77 Î 78 Ï 79 Ð 80 Ñ 81 Ò 82 Ó 83 Ô 84
Õ 85 Ö 86 Ø 87 Ù 88 Ú 89 Û 90 Ü 91 Ý 92 Þ 93 ß 94 à 95 á 96 ã 97 ä 98 æ 99 ç 100 è 101
é 102 ê 103 ë 104 ì 105 í 106 î 107 ï 108 ð 109 ñ 110 ò 111 ó 112 ô 113 õ 114 ö 115 ø 116 ú 117 û 118
ü 119 ý 120 þ 121 ÿ 122 Ā 123 ā 124 Ă 125 ă 126 Ą 127 ą 128 Ć 129 ć 130 Ĉ 131 ĉ 132 Ċ 133 ċ 134 Č 135
č 136 Ď 137 ď 138 Đ 139 đ 140 Ē 141 ē 142 Ĕ 143 ĕ 144 Ė 145 ė 146 Ę 147 ę 148 Ě 149 ě 150 Ĝ 151 ĝ 152
Ğ 153 ğ 154 Ġ 155 ġ 156 Ģ 157 ģ 158 Ĥ 159 ĥ 160 Ħ 161 ħ 162 Ĩ 163 ĩ 164 Ī 165 ī 166 Ĭ 167 ĭ 168 Į 169
į 170 İ 171 ı 172 Ĳ 173 ĳ 174 Ĵ 175 ĵ 176 Ķ 177 ķ 178 ĸ 179 Ĺ 180 ĺ 181 Ļ 182 ļ 183 Ľ 184 ľ 185 Ŀ 186
ŀ 187 Ł 188 ł 189 Ń 190 ń 191 Ņ 192 ņ 193 Ň 194 ň 195 ŉ 196 Ŋ 197 ŋ 198 Ō 199 ō 200 Ŏ 201 ŏ 202 Ő 203
ő 204 Œ 205 œ 206 Ŕ 207 ŕ 208 Ŗ 209 ŗ 210 Ř 211 ř 212 Ś 213 ś 214 Ŝ 215 ŝ 216 Ş 217 ş 218 Š 219 š 220
Ţ 221 ţ 222 Ť 223 ť 224 Ŧ 225 ŧ 226 Ũ 227 ũ 228 Ū 229 ū 230 Ŭ 231 ŭ 232 Ů 233 ů 234 Ű 235 ű 236 Ų 237
ų 238 Ŵ 239 ŵ 240 Ŷ 241 ŷ 242 Ÿ 243 Ź 244 ź 245 Ż 246 ż 247 Ž 248 ž 249 ſ 250 ƀ 251 Ɓ 252 Ƃ 253 ƃ 254
Ƅ 255 ƅ 256 Ɔ 257 Ƈ 258 ƈ 259 Ɖ 260 Ɗ 261 Ƌ 262 ƌ 263 ƍ 264 Ǝ 265 Ə 266 Ɛ 267 Ƒ 268 ƒ 269 Ɠ 270 Ɣ 271
ƕ 272 Ɩ 273 Ɨ 274 Ƙ 275 ƙ 276 ƚ 277 ƛ 278 Ɯ 279 Ɲ 280 ƞ 281 Ɵ 282 Ơ 283 ơ 284 Ƣ 285 ƣ 286 Ƥ 287 ƥ 288
Ʀ 289 Ƨ 290 ƨ 291 Ʃ 292 ƪ 293 ƫ 294 Ƭ 295 ƭ 296 Ʈ 297 Ư 298 ư 299 Ʊ 300 Ʋ 301 Ƴ 302 ƴ 303 Ƶ 304 ƶ 305
Ʒ 306 Ƹ 307 ƹ 308 ƺ 309 ƻ 310 Ƽ 311 ƽ 312 ƾ 313 ƿ 314 ǀ 315 ǁ 316 ǂ 317 ǃ 318 Ǎ 319 ǎ 320 Ǐ 321 ǐ 322
Ǒ 323 ǒ 324 Ǔ 325 ǔ 326 Ǖ 327 ǖ 328 Ǘ 329 ǘ 330 Ǚ 331 ǚ 332 Ǜ 333 ǜ 334 ǝ 335 Ǟ 336 ǟ 337 Ǡ 338 ǡ 339
Ǣ 340 ǣ 341 Ǥ 342 ǥ 343 Ǧ 344 ǧ 345 Ǩ 346 ǩ 347 Ǫ 348 ǫ 349 Ǭ 350 ǭ 351 Ǯ 352 ǯ 353 ǰ 354 Ǳ 355 ǳ 356
Ǵ 357 ǵ 358 Ƕ 359 Ƿ 360 Ǹ 361 ǹ 362 Ǻ 363 ǻ 364 Ǽ 365 ǽ 366 Ǿ 367 ǿ 368 Ȁ 369 ȁ 370 Ȃ 371 ȃ 372 Ȅ 373
ȅ 374 Ȇ 375 ȇ 376 Ȉ 377 ȉ 378 Ȋ 379 ȋ 380 Ȍ 381 ȍ 382 Ȏ 383 ȏ 384 Ȑ 385 ȑ 386 Ȓ 387 ȓ 388 Ȕ 389 ȕ 390
Ȗ 391 ȗ 392 Ș 393 ș 394 Ț 395 ț 396 Ȝ 397 ȝ 398 Ȟ 399 ȟ 400 Ƞ 401 ȡ 402 Ȣ 403 ȣ 404 Ȥ 405 ȥ 406 Ȧ 407
ȧ 408 Ȩ 409 ȩ 410 Ȫ 411 ȫ 412 Ȭ 413 ȭ 414 Ȯ 415 ȯ 416 Ȱ 417 ȱ 418 Ȳ 419 ȳ 420 ȴ 421 ȵ 422 ȶ 423 ȷ 424
ȸ 425 ȹ 426 Ⱥ 427 Ȼ 428 ȼ 429 Ƚ 430 Ⱦ 431 ȿ 432 ɀ 433 Ɂ 434 ɂ 435 Ƀ 436 Ʉ 437 Ʌ 438 Ɇ 439 ɇ 440 Ɉ 441
ɋ 442 Ɍ 443 ɍ 444 Ɏ 445 ɏ 446 Ḁ 447 ḁ 448 Ḃ 449 ḃ 450 Ḅ 451 ḅ 452 Ḇ 453 ḇ 454 Ḉ 455 ḉ 456 Ḋ 457 ḋ 458
Ḍ 459 ḍ 460 Ḏ 461 ḏ 462 Ḑ 463 ḑ 464 Ḓ 465 ḓ 466 Ḕ 467 ḕ 468 Ḗ 469 ḗ 470 Ḙ 471 ḙ 472 Ḛ 473 ḛ 474 Ḝ 475
ḝ 476 Ḟ 477 ḟ 478 Ḡ 479 ḡ 480 Ḣ 481 ḣ 482 Ḥ 483 ḥ 484 Ḧ 485 ḧ 486 Ḩ 487 ḩ 488 Ḫ 489 ḫ 490 Ḭ 491 ḭ 492
Ḯ 493 ḯ 494 Ḱ 495 ḱ 496 Ḳ 497 ḳ 498 Ḵ 499 ḵ 500 Ḷ 501 ḷ 502 Ḹ 503 ḹ 504 Ḻ 505 ḻ 506 Ḽ 507 ḽ 508 Ḿ 509
ḿ 510 Ṁ 511 ṁ 512 Ṃ 513 ṃ 514 Ṅ 515 ṅ 516 Ṇ 517 ṇ 518 Ṉ 519 ṉ 520 Ṋ 521 ṋ 522 Ṍ 523 ṍ 524 Ṏ 525 ṏ 526
Ṑ 527 ṑ 528 Ṓ 529 ṓ 530 Ṕ 531 ṕ 532 Ṗ 533 ṗ 534 Ṙ 535 ṙ 536 Ṛ 537 ṛ 538 Ṝ 539 ṝ 540 Ṟ 541 ṟ 542 Ṡ 543
ṡ 544 Ṣ 545 ṣ 546 Ṥ 547 ṥ 548 Ṧ 549 ṧ 550 Ṩ 551 ṩ 552 Ṫ 553 ṫ 554 Ṭ 555 ṭ 556 Ṯ 557 ṯ 558 Ṱ 559 ṱ 560
Ṳ 561 ṳ 562 Ṵ 563 ṵ 564 Ṷ 565 ṷ 566 Ṹ 567 ṹ 568 Ṻ 569 ṻ 570 Ṽ 571 ṽ 572 Ṿ 573 ṿ 574 Ẁ 575 ẁ 576 Ẃ 577
ẃ 578 Ẅ 579 ẅ 580 Ẇ 581 ẇ 582 Ẉ 583 ẉ 584 Ẋ 585 ẋ 586 Ẍ 587 ẍ 588 Ẏ 589 ẏ 590 Ẑ 591 ẑ 592 Ẓ 593 ẓ 594
Ẕ 595 ẕ 596 ẖ 597 ẗ 598 ẘ 599 ẙ 600 ẚ 601 ẛ 602 ẜ 603 ẝ 604 ẟ 605 Ạ 606 ạ 607 Ả 608 ả 609 Ấ 610 ấ 611
Ầ 612 ầ 613 Ẩ 614 ẩ 615 Ẫ 616 ẫ 617 Ậ 618 ậ 619 Ắ 620 ắ 621 Ằ 622 ằ 623 Ẳ 624 ẳ 625 Ẵ 626 ẵ 627 Ặ 628
ặ 629 Ẹ 630 ẹ 631 Ẻ 632 ẻ 633 Ẽ 634 ẽ 635 Ế 636 ế 637 Ề 638 ề 639 Ể 640 ể 641 Ễ 642 ễ 643 Ệ 644 ệ 645
Ỉ 646 ỉ 647 Ị 648 ị 649 Ọ 650 ọ 651 Ỏ 652 ỏ 653 Ố 654 ố 655 Ồ 656 ồ 657 Ổ 658 ổ 659 Ỗ 660 ỗ 661 Ộ 662
ộ 663 Ớ 664 ớ 665 Ờ 666 ờ 667 Ở 668 ở 669 Ỡ 670 ỡ 671 Ợ 672 ợ 673 Ụ 674 ụ 675 Ủ 676 ủ 677 Ứ 678 ứ 679
Ừ 680 ừ 681 Ử 682 ử 683 Ữ 684 ữ 685 Ự 686 ự 687 Ỳ 688 ỳ 689 Ỵ 690 ỵ 691 Ỷ 692 ỷ 693 Ỹ 694 ỹ 695 ỻ 696
ͻ 697 ͼ 698 ͽ 699 Ά 700 Έ 701 Α 702 Β 703 Γ 704 Δ 705 Ε 706 Ζ 707 Η 708 Θ 709 Ι 710 Κ 711 Λ 712 Μ 713
Ν 714 Ξ 715 Ο 716 Π 717 Ρ 718 Σ 719 Τ 720 Υ 721 Φ 722 Χ 723 Ψ 724 Ω 725 Ϋ 726 ά 727 έ 728 ή 729 ί 730
ΰ 731 α 732 β 733 γ 734 δ 735 ε 736 ζ 737 η 738 θ 739 ι 740 κ 741 λ 742 μ 743 ν 744 ξ 745 ο 746 π 747
ρ 748 ς 749 σ 750 τ 751 υ 752 φ 753 χ 754 ψ 755 ϋ 756 ό 757 ύ 758 ώ 759 ϐ 760 ϑ 761 ϒ 762 ϔ 763 ϕ 764
ϖ 765 ϗ 766 Ϙ 767 ϙ 768 Ϛ 769 ϛ 770 Ϝ 771 ϝ 772 Ϟ 773 ϟ 774 Ϡ 775 ϥ 776 ϧ 777 Ϩ 778 ϩ 779 ϫ 780 Ϭ 781
ϭ 782 Ϯ 783 ϯ 784 ϰ 785 ϱ 786 ϲ 787 ϵ 788 Ϸ 789 ϸ 790 Ϲ 791 ϻ 792 ϼ 793 Ͻ 794 Ͼ 795 Ͽ 796 Ѐ 797 Ё 798
Ђ 799 Ѓ 800 Є 801 Ѕ 802 І 803 Ї 804 Ј 805 Љ 806 Њ 807 Ћ 808 Ќ 809 Ѝ 810 Ў 811 Џ 812 А 813 Б 814 В 815
Г 816 Д 817 Е 818 Ж 819 З 820 И 821 Й 822 К 823 Л 824 М 825 Н 826 О 827 П 828 Р 829 С 830 Т 831 У 832
Ф 833 Х 834 Ц 835 Ч 836 Ш 837 Щ 838 Ъ 839 Ы 840 Ь 841 Э 842 Ю 843 Я 844 а 845 б 846 в 847 г 848 д 849
е 850 ж 851 з 852 и 853 й 854 к 855 л 856 м 857 н 858 о 859 п 860 р 861 с 862 т 863 у 864 ф 865 х 866
ц 867 ч 868 ш 869 щ 870 ъ 871 ы 872 ь 873 э 874 ю 875 я 876 ѐ 877 ё 878 ђ 879 ѓ 880 є 881 ѕ 882 і 883
ї 884 ј 885 љ 886 њ 887 ћ 888 ќ 889 ѝ 890 ў 891 џ 892 ѡ 893 Ѣ 894 ѣ 895 ѥ 896 Ѧ 897 ѧ 898 Ѫ 899 ѫ 900
Ѱ 901 ѱ 902 Ѳ 903 ѳ 904 Ѵ 905 ѵ 906 Ѷ 907 ѷ 908 ѻ 909 ѽ 910 ѿ 911 Ҁ 912 ҁ 913 ҋ 914 Ҍ 915 ҍ 916 Ҏ 917
ҏ 918 Ґ 919 ґ 920 Ғ 921 ғ 922 Ҕ 923 ҕ 924 Җ 925 җ 926 Ҙ 927 ҙ 928 Қ 929 қ 930 Ҝ 931 ҝ 932 Ҟ 933 ҟ 934
Ҡ 935 ҡ 936 Ң 937 ң 938 Ҥ 939 ҥ 940 ҩ 941 Ҫ 942 ҫ 943 Ҭ 944 ҭ 945 Ү 946 ү 947 Ұ 948 ұ 949 Ҳ 950 ҳ 951
ҵ 952 Ҷ 953 ҷ 954 Ҹ 955 ҹ 956 Һ 957 һ 958 Ӏ 959 Ӂ 960 ӂ 961 Ӄ 962 ӄ 963 Ӆ 964 ӆ 965 Ӈ 966 ӈ 967 Ӊ 968
ӊ 969 Ӌ 970 ӌ 971 ӎ 972 Ӑ 973 ӑ 974 Ӓ 975 ӓ 976 Ӕ 977 ӕ 978 Ӗ 979 ӗ 980 Ә 981 ә 982 Ӛ 983 ӛ 984 Ӝ 985
ӝ 986 Ӟ 987 ӟ 988 Ӡ 989 ӡ 990 Ӣ 991 ӣ 992 Ӥ 993 ӥ 994 Ӧ 995 ӧ 996 Ө 997 ө 998 Ӫ 999 ӫ 1000 Ӭ 1001 ӭ 1002
Ӯ 1003 ӯ 1004 Ӱ 1005 ӱ 1006 Ӳ 1007 ӳ 1008 Ӵ 1009 ӵ 1010 Ӷ 1011 ӷ 1012 Ӹ 1013 ӹ 1014 Ӻ 1015 ӻ 1016 Ӽ 1017
ӽ 1018 Ӿ 1019 ӿ 1020 א 1021 ב 1022 ג 1023 ד 1024 ט 1025 ך 1026 כ 1027 ל 1028 ם 1029 מ 1030 ס 1031 ע 1032
ף 1033 פ 1034 ץ 1035 צ 1036 ק 1037 ר 1038 ש 1039 װ 1040
)

# FUNCTION: letters_to_numbers {{{
# Converts each character of input string into number 0..61
#
letters_to_numbers() {
    local letters="$1" l

    reply=( )

    if [[ "$letters" != [0-9a-zA-ZµºÀ-ÖØ-áãäæ-öøú-ǃǍ-Ǳǳ-Ɉɋ-ɏḀ-ẝẟ-ỹỻͻ-ͽΆΈΑ-ΡΣ-ΩΫ-ψϋ-ώϐ-ϒϔ-Ϡϥϧ-ϩϫ-ϲϵϷ-Ϲϻ-ϿЀ-џѡ-ѣѥ-ѧѪѫѰ-ѷѻѽѿ-ҁҋ-ҥҩ-ҳҵ-һӀ-ӌӎӐ-ӿא-ד]## ]]; then
        print "Incorrect character detected in: '$letters'. Gcode should consist only from a-z, A-Z, 0-9 characters, plus 962 unicode characters [0-9a-zA-ZµºÀ-ÖØ-áãäæ-öøú-ǃǍ-Ǳǳ-Ɉɋ-ɏḀ-ẝẟ-ỹỻͻ-ͽΆΈΑ-ΡΣ-ΩΫ-ψϋ-ώϐ-ϒϔ-Ϡϥϧ-ϩϫ-ϲϵϷ-Ϲϻ-ϿЀ-џѡ-ѣѥ-ѧѪѫѰ-ѷѻѽѿ-ҁҋ-ҥҩ-ҳҵ-һӀ-ӌӎӐ-ӿא-ד]"
        return 1
    fi

    integer number
    for l in "${(@s::)letters}"; do
        number="${characters_map[$l]}"
        reply+=( "$number" )
    done

    return 0
}
# }}}
# FUNCTION: numbers_to_letters {{{
# Converts array of numbers into string [0-9a-zA-Z<unicode chars>]+
numbers_to_letters() {
    REPLY=""
    integer i
    for i in "$@"; do
        if [[ "$i" -lt 0 || "$i" -gt 1023 ]]; then
            print "Incorrect number during character conversion: $i"
            return 1
        fi
        REPLY+="${characters[i+1]}"
    done

    return 0
}
# }}}
# FUNCTION: decode_gcode {{{
# Turns gcode into bits
decode_gcode() {
    local letters="$1"

    local -a bits
    local workingvar="$letters"
    while [ "${workingvar//0/}" != "" ]; do
        div2 "$workingvar"
        workingvar="${reply[1]}"
        bits=( "${reply[2]}" "${bits[@]}" )
        # print "After div $workingvar/${reply[2]}"
    done
    # print "Bits of the letters $letters are: ${(j::)bits[@]}"
    reply=( "${bits[@]}" )
}
# }}}
# FUNCTION: get_integer_from_base_1024 {{{
# Converts given base-1024 string into integer
# Warning: it tagets integer (signed), so
# the size of number is limited here (while
# decode_gcode generates series of bits of
# arbitrary length)
get_integer_from_base_1024() {
    local letters="$1"
    local -a bits
    local workingvar="$letters"

    # Get base-2 generated array consisting of 1 and 0
    while [ "${workingvar//0/}" != "" ]; do
        div2 "$workingvar"
        workingvar="${reply[1]}"
        bits=( "${reply[2]}" "${bits[@]}" )
    done

    # Now sum up the obtained 0 and 1
    integer i mul=1 size="${#bits}"
    REPLY="0"
    for (( i=size; i>=1; i-- )); do
        REPLY=$(( REPLY + bits[i]*mul ))
        mul=$(( mul * 2 ))
    done

    # TODO: detect overflow and other problems
    return 0
}
# }}}
# FUNCTION: encode_gcode_str01 {{{
# Takes string of 0 and 1 and encodes it to base-1024
# number expressed via 0-9a-zA-Z<Unicode chars>
#
encode_gcode_str01() {
    str_01_to_24-bit_pack_numbers "$1"
    encode_gcode_24-bit_pack_numbers "${reply[@]}"

}
# }}}
# FUNCTION: encode_gcode_arr01 {{{
# Takes array (positional parameters) of 0 and 1 and encodes
# it to base-1024 number expressed via 0-9a-zA-Z<Unicode chars>
#
encode_gcode_arr01() {
    arr_01_to_24-bit_pack_numbers "$@"
    encode_gcode_24-bit_pack_numbers "${reply[@]}"
}
# }}}
# FUNCTION: encode_gcode_24-bit_pack_numbers {{{
# Takes 24-bit pack numbers and encodes them to base-1024
# number expressed via 0-9a-zA-Z<Unicode chars>
#
encode_gcode_24-bit_pack_numbers() {
    local -a numbers
    numbers=( "$@" )

    local -a nums_base1024 workingvar
    workingvar=( "${numbers[@]}" )

    integer all_zero=1 i
    for i in "${workingvar[@]}"; do
        if [[ "$i" -ne 0 ]]; then
            all_zero=0
            break
        fi
    done

    while (( all_zero != 1 )); do
        div_24-bit_pack_numbers_1024 "${workingvar[@]}"
        workingvar=( "${reply[@]}" )
        nums_base1024=( "$REPLY" "${nums_base1024[@]}" )

        # Check if workingvar is all zero
        all_zero=1
        for i in "${workingvar[@]}"; do
            if [[ "$i" -ne 0 ]]; then
                all_zero=0
                break
            fi
        done
    done

    # print "Base1024 numbers of $str01 are: ${(j:,:)nums_base1024[@]}"
    numbers_to_letters "${nums_base1024[@]}" # Result in $REPLY
    reply=( "${nums_base1024[@]}" )          # Additional result
}
# }}}
# FUNCTION: div2 {{{
# $1 - gcode's letters
# $reply - ( "gcode's letters after division" "remainder 0 or 1" )
div2() {

    #
    # First translate the letters to numbers and put them into array
    #

    local letters="$1"
    local -a numbers
    letters_to_numbers "$letters" || return 1
    numbers=( "${reply[@]}" )

    #
    # Now operate on the array performing long-division
    #

    local -a result
    result=()

    integer prepared_for_division="${numbers[1]}" input
    for input in ${(@)numbers[2,-1]} 0; do
        integer quotient=prepared_for_division/2

        result+=( "$quotient" )

        integer recovered=$(( quotient*2 ))
        integer subtracted=prepared_for_division-recovered

        prepared_for_division=1024*subtracted+input
    done

    #
    # Now convert the result to letters
    #

    numbers_to_letters "${result[@]}" || return 2

    #
    # Return
    #

    reply=( "$REPLY" "$subtracted" )

    return 0
}
# }}}
# FUNCTION: str_01_to_24-bit_pack_numbers {{{
# Takes STRING of 0 and 1 and converts it to array of numbers
# that are 24-bit packs taken from right to left, from the string
#
str_01_to_24-bit_pack_numbers() {
    local -a bits
    bits=( "${(@s::)1}" )
    arr_01_to_24-bit_pack_numbers "${bits[@]}"

    return 0
}
# }}}
# FUNCTION: arr_01_to_24-bit_pack_numbers {{{
# Takes ARRAY (@) of 0 and 1 and converts it to array of numbers
# that are 24-bit packs taken from right to left, from the string
#
arr_01_to_24-bit_pack_numbers() {
    local -a bits pack numbers
    bits=( "$@" )
    integer count=0 i size="${#bits}"

    # Take packs of 8 bits, convert each to number and store in array
    for (( i=size; i>=1; i-- )); do
        pack=( "$bits[i]" "${pack[@]}" )
        count+=1
        (( count < 24 && i != 1 )) && continue
        count=0

        # Convert the max. 8 bit pack to number
        integer result=0 p
        for p in "${pack[@]}"; do
            result=result*2+p
        done

        numbers=( "$result" "${numbers[@]}" )
        pack=( )
    done

    reply=( "${numbers[@]}" )
    return 0
}
# }}}
# FUNCTION: div_24-bit_pack_numbers_1024 {{{
# $1 - series of 0 and 1
# $reply - ( "series of 0 and 1, result of division" "remainder 0 ... 61" )
div_24-bit_pack_numbers_1024() {
    local -a numbers
    numbers=( "$@" )

    # print "Dividing numbers: " "${numbers[@]}"

    #
    # Now operate on the array performing long-division
    #

    integer cur last
    cur=1
    last="${#numbers}"

    local -a result
    result=()

    integer prepared_for_division="${numbers[cur]}"
    while (( 1 )); do
        integer quotient=prepared_for_division/1024

        result+=( "$quotient" )

        integer recovered=$(( quotient*1024 ))
        integer subtracted=prepared_for_division-recovered

        cur+=1
        if (( cur > last )); then
            break
        fi

        prepared_for_division=16777216*subtracted+${numbers[cur]}
    done

    # print "Result of division: " "${result[@]}"
    # print "Remainder: $subtracted"

    #
    # Return
    #

    reply=( "${result[@]}" )
    REPLY="$subtracted"

    return 0
}
# }}}
# FUNCTION: convert_integer_to_base_1024 {{{
# Takes number in $1, returns [0-9a-zA-Z<unicode chars>]+
# - representation of the number in base-1024
#
convert_integer_to_base_1024() {
    integer number="$1"
    local -a digits

    integer new_number=number
    integer remainder
    while (( new_number != 0 )); do
        remainder=new_number%1024
        new_number=new_number/1024

        digits+=( "$remainder" )
    done

    [[ "${#digits}" -eq 0 ]] && digits+=( 0 )
    [[ "${#digits}" -eq 1 ]] && digits+=( 0 )
    [[ "${#digits}" -eq 2 ]] && digits+=( 0 )

    digits=( "${(Oa)digits[@]}" )

    numbers_to_letters "${digits[@]}"
}
# }}}

# vim:ft=zsh
