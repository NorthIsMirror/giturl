setopt typesetsilent

local -a characters
characters=( 0 1 2 3 4 5 6 7 8 9 a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z

# Latin-1 Supplement [µºÀ-ÖØ-áãäæ-öøú-ÿ]
µ º À Á Â Ã Ä Å Æ Ç È É Ê Ë Ì Í Î Ï Ð Ñ Ò Ó Ô Õ Ö Ø Ù Ú Û Ü Ý Þ ß à á ã ä æ ç è é ê ë ì í î ï ð ñ ò ó ô õ ö ø ú û ü ý þ ÿ

# Latin Extended-A [ÿ-ſ]
Ā ā Ă ă Ą ą Ć ć Ĉ ĉ Ċ ċ Č č Ď ď Đ đ Ē ē Ĕ ĕ Ė ė Ę ę Ě ě Ĝ ĝ Ğ ğ Ġ ġ Ģ ģ Ĥ ĥ Ħ ħ Ĩ ĩ Ī ī Ĭ ĭ Į į İ ı Ĳ ĳ Ĵ ĵ Ķ ķ ĸ Ĺ ĺ Ļ ļ Ľ ľ Ŀ ŀ Ł ł Ń ń
Ņ ņ Ň ň ŉ Ŋ ŋ Ō ō Ŏ ŏ Ő ő Œ œ Ŕ ŕ Ŗ ŗ Ř ř Ś ś Ŝ ŝ Ş ş Š š Ţ ţ Ť ť Ŧ ŧ Ũ ũ Ū ū Ŭ ŭ Ů ů Ű ű Ų ų Ŵ ŵ Ŷ ŷ Ÿ Ź ź Ż ż Ž ž ſ

# Latin Extended-B [ſ-ɏ]
ƀ Ɓ Ƃ ƃ Ƅ ƅ Ɔ Ƈ ƈ Ɖ Ɗ Ƌ ƌ ƍ Ǝ Ə Ɛ Ƒ ƒ Ɠ Ɣ ƕ Ɩ Ɨ Ƙ ƙ ƚ ƛ Ɯ Ɲ ƞ Ɵ Ơ ơ Ƣ ƣ Ƥ ƥ Ʀ Ƨ ƨ Ʃ ƪ ƫ Ƭ ƭ Ʈ Ư ư Ʊ Ʋ Ƴ ƴ Ƶ ƶ Ʒ Ƹ ƹ ƺ ƻ Ƽ ƽ ƾ ƿ ǀ ǁ ǂ ǃ Ǆ
ǅ ǆ Ǉ ǈ ǉ Ǌ ǋ ǌ Ǎ ǎ Ǐ ǐ Ǒ ǒ Ǔ ǔ Ǖ ǖ Ǘ ǘ Ǚ ǚ Ǜ ǜ ǝ Ǟ ǟ Ǡ ǡ Ǣ ǣ Ǥ ǥ Ǧ ǧ Ǩ ǩ Ǫ ǫ Ǭ ǭ Ǯ ǯ ǰ Ǳ ǲ ǳ Ǵ ǵ Ƕ Ƿ Ǹ ǹ Ǻ ǻ Ǽ ǽ Ǿ ǿ Ȁ ȁ Ȃ ȃ Ȅ ȅ Ȇ ȇ Ȉ ȉ
Ȋ ȋ Ȍ ȍ Ȏ ȏ Ȑ ȑ Ȓ ȓ Ȕ ȕ Ȗ ȗ Ș ș Ț ț Ȝ ȝ Ȟ ȟ Ƞ ȡ Ȣ ȣ Ȥ ȥ Ȧ ȧ Ȩ ȩ Ȫ ȫ Ȭ ȭ Ȯ ȯ Ȱ ȱ Ȳ ȳ ȴ ȵ ȶ ȷ ȸ ȹ Ⱥ Ȼ ȼ Ƚ Ⱦ ȿ ɀ Ɂ ɂ Ƀ Ʉ Ʌ Ɇ ɇ Ɉ ɉ Ɋ ɋ Ɍ ɍ Ɏ ɏ

# Latin Extended Additional [Ḁ-ỿ]
Ḁ ḁ Ḃ ḃ Ḅ ḅ Ḇ ḇ Ḉ ḉ Ḋ ḋ Ḍ ḍ Ḏ ḏ Ḑ ḑ Ḓ ḓ Ḕ ḕ Ḗ ḗ Ḙ ḙ Ḛ ḛ Ḝ ḝ Ḟ ḟ Ḡ ḡ Ḣ ḣ Ḥ ḥ Ḧ ḧ Ḩ ḩ Ḫ ḫ Ḭ ḭ Ḯ ḯ Ḱ ḱ Ḳ ḳ Ḵ
ḵ Ḷ ḷ Ḹ ḹ Ḻ ḻ Ḽ ḽ Ḿ ḿ Ṁ ṁ Ṃ ṃ Ṅ ṅ Ṇ ṇ Ṉ ṉ Ṋ ṋ Ṍ ṍ Ṏ ṏ Ṑ ṑ Ṓ ṓ Ṕ ṕ Ṗ ṗ Ṙ ṙ Ṛ ṛ Ṝ ṝ Ṟ ṟ Ṡ ṡ Ṣ ṣ Ṥ ṥ Ṧ ṧ Ṩ ṩ
Ṫ ṫ Ṭ ṭ Ṯ ṯ Ṱ ṱ Ṳ ṳ Ṵ ṵ Ṷ ṷ Ṹ ṹ Ṻ ṻ Ṽ ṽ Ṿ ṿ Ẁ ẁ Ẃ ẃ Ẅ ẅ Ẇ ẇ Ẉ ẉ Ẋ ẋ Ẍ ẍ Ẏ ẏ Ẑ ẑ Ẓ ẓ Ẕ ẕ ẖ ẗ ẘ ẙ ẚ ẛ ẜ ẝ ẞ
ẟ Ạ ạ Ả ả Ấ ấ Ầ ầ Ẩ ẩ Ẫ ẫ Ậ ậ Ắ ắ Ằ ằ Ẳ ẳ Ẵ ẵ Ặ ặ Ẹ ẹ Ẻ ẻ Ẽ ẽ Ế ế Ề ề Ể ể Ễ ễ Ệ ệ Ỉ ỉ Ị ị Ọ ọ Ỏ ỏ Ố ố Ồ ồ
Ổ ổ Ỗ ỗ Ộ ộ Ớ ớ Ờ ờ Ở ở Ỡ ỡ Ợ ợ Ụ ụ Ủ ủ Ứ ứ Ừ ừ Ử ử Ữ ữ Ự ự Ỳ ỳ Ỵ ỵ Ỷ ỷ Ỹ ỹ Ỻ ỻ Ỽ ỽ Ỿ ỿ

# Greek and Coptic [ͻ-ͽΆΈΑ-ΡΣ-ΩΫ-ψϋ-ώϐ-ϒϔ-ϲϵϷ-Ϲϻ-Ͽ]
ͻ ͼ ͽ Ά Έ Α Β Γ Δ Ε Ζ Η Θ Ι Κ Λ Μ Ν Ξ Ο Π Ρ Σ Τ Υ Φ Χ Ψ Ω Ϋ ά έ ή ί ΰ α β γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ ς
σ τ υ φ χ ψ ϋ ό ύ ώ ϐ ϑ ϒ ϔ ϕ ϖ ϗ Ϙ ϙ Ϛ ϛ Ϝ ϝ Ϟ ϟ Ϡ ϡ Ϣ ϣ Ϥ ϥ Ϧ ϧ Ϩ ϩ Ϫ ϫ Ϭ ϭ Ϯ ϯ ϰ ϱ ϲ ϵ Ϸ ϸ Ϲ ϻ ϼ Ͻ Ͼ Ͽ

# Cyrillic [Ѐ-џѡ-ѣѥ-ѧѪѫѰ-ѷѻѽѿ-ҁҋ-ҥҩ-ҳҵ-һӀ-ӌӎӐ-ӿ]
Ѐ Ё Ђ Ѓ Є Ѕ І Ї Ј Љ Њ Ћ Ќ Ѝ Ў Џ А Б В Г Д Е Ж З И Й К Л М Н О П Р С Т У Ф Х Ц Ч Ш Щ Ъ Ы Ь Э Ю Я а б в г д
е ж з и й к л м н о п р с т у ф х ц ч ш щ ъ ы ь э ю я ѐ ё ђ ѓ є ѕ і ї ј љ њ ћ ќ ѝ ў џ ѡ Ѣ ѣ ѥ Ѧ ѧ Ѫ ѫ Ѱ ѱ
Ѳ ѳ Ѵ ѵ Ѷ ѷ ѻ ѽ ѿ Ҁ ҁ ҋ Ҍ ҍ Ҏ ҏ Ґ ґ Ғ ғ Ҕ ҕ Җ җ Ҙ ҙ Қ қ Ҝ ҝ Ҟ ҟ Ҡ ҡ Ң ң Ҥ ҥ ҩ Ҫ ҫ Ҭ ҭ Ү ү Ұ ұ Ҳ ҳ ҵ Ҷ ҷ Ҹ
ҹ Һ һ Ӏ Ӂ ӂ Ӄ ӄ Ӆ ӆ Ӈ ӈ Ӊ ӊ Ӌ ӌ ӎ Ӑ ӑ Ӓ ӓ Ӕ ӕ Ӗ ӗ Ә ә Ӛ ӛ Ӝ ӝ Ӟ ӟ Ӡ ӡ Ӣ ӣ Ӥ ӥ Ӧ ӧ Ө ө Ӫ ӫ Ӭ ӭ Ӯ ӯ Ӱ ӱ Ӳ ӳ
Ӵ ӵ Ӷ ӷ Ӹ ӹ Ӻ ӻ Ӽ ӽ Ӿ ӿ

# Character class for all: [0-9a-zA-ZµºÀ-ÖØ-áãäæ-öøú-ɏḀ-ỿͻ-ͽΆΈΑ-ΡΣ-ΩΫ-ψϋ-ώϐ-ϒϔ-ϲϵϷ-Ϲϻ-ϿЀ-џѡ-ѣѥ-ѧѪѫѰ-ѷѻѽѿ-ҁҋ-ҥҩ-ҳҵ-һӀ-ӌӎӐ-ӿ]
)

local -A characters_map
characters_map=(
0 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 a 10 b 11 c 12 d 13 e 14 f 15 g 16 h 17 i 18 j 19
k 20 l 21 m 22 n 23 o 24 p 25 q 26 r 27 s 28 t 29 u 30 v 31 w 32 x 33 y 34 z 35 A 36 B 37 C 38 D 39
E 40 F 41 G 42 H 43 I 44 J 45 K 46 L 47 M 48 N 49 O 50 P 51 Q 52 R 53 S 54 T 55 U 56 V 57 W 58 X 59
Y 60 Z 61 µ 62 º 63 À 64 Á 65 Â 66 Ã 67 Ä 68 Å 69 Æ 70 Ç 71 È 72 É 73 Ê 74 Ë 75 Ì 76 Í 77 Î 78 Ï 79
Ð 80 Ñ 81 Ò 82 Ó 83 Ô 84 Õ 85 Ö 86 Ø 87 Ù 88 Ú 89 Û 90 Ü 91 Ý 92 Þ 93 ß 94 à 95 á 96 ã 97 ä 98 æ 99
ç 100 è 101 é 102 ê 103 ë 104 ì 105 í 106 î 107 ï 108 ð 109 ñ 110 ò 111 ó 112 ô 113 õ 114 ö 115 ø 116 ú 117 û 118 ü 119
ý 120 þ 121 ÿ 122 Ā 123 ā 124 Ă 125 ă 126 Ą 127 ą 128 Ć 129 ć 130 Ĉ 131 ĉ 132 Ċ 133 ċ 134 Č 135 č 136 Ď 137 ď 138 Đ 139
đ 140 Ē 141 ē 142 Ĕ 143 ĕ 144 Ė 145 ė 146 Ę 147 ę 148 Ě 149 ě 150 Ĝ 151 ĝ 152 Ğ 153 ğ 154 Ġ 155 ġ 156 Ģ 157 ģ 158 Ĥ 159
ĥ 160 Ħ 161 ħ 162 Ĩ 163 ĩ 164 Ī 165 ī 166 Ĭ 167 ĭ 168 Į 169 į 170 İ 171 ı 172 Ĳ 173 ĳ 174 Ĵ 175 ĵ 176 Ķ 177 ķ 178 ĸ 179
Ĺ 180 ĺ 181 Ļ 182 ļ 183 Ľ 184 ľ 185 Ŀ 186 ŀ 187 Ł 188 ł 189 Ń 190 ń 191 Ņ 192 ņ 193 Ň 194 ň 195 ŉ 196 Ŋ 197 ŋ 198 Ō 199
ō 200 Ŏ 201 ŏ 202 Ő 203 ő 204 Œ 205 œ 206 Ŕ 207 ŕ 208 Ŗ 209 ŗ 210 Ř 211 ř 212 Ś 213 ś 214 Ŝ 215 ŝ 216 Ş 217 ş 218 Š 219
š 220 Ţ 221 ţ 222 Ť 223 ť 224 Ŧ 225 ŧ 226 Ũ 227 ũ 228 Ū 229 ū 230 Ŭ 231 ŭ 232 Ů 233 ů 234 Ű 235 ű 236 Ų 237 ų 238 Ŵ 239
ŵ 240 Ŷ 241 ŷ 242 Ÿ 243 Ź 244 ź 245 Ż 246 ż 247 Ž 248 ž 249 ſ 250 ƀ 251 Ɓ 252 Ƃ 253 ƃ 254 Ƅ 255 ƅ 256 Ɔ 257 Ƈ 258 ƈ 259
Ɖ 260 Ɗ 261 Ƌ 262 ƌ 263 ƍ 264 Ǝ 265 Ə 266 Ɛ 267 Ƒ 268 ƒ 269 Ɠ 270 Ɣ 271 ƕ 272 Ɩ 273 Ɨ 274 Ƙ 275 ƙ 276 ƚ 277 ƛ 278 Ɯ 279
Ɲ 280 ƞ 281 Ɵ 282 Ơ 283 ơ 284 Ƣ 285 ƣ 286 Ƥ 287 ƥ 288 Ʀ 289 Ƨ 290 ƨ 291 Ʃ 292 ƪ 293 ƫ 294 Ƭ 295 ƭ 296 Ʈ 297 Ư 298 ư 299
Ʊ 300 Ʋ 301 Ƴ 302 ƴ 303 Ƶ 304 ƶ 305 Ʒ 306 Ƹ 307 ƹ 308 ƺ 309 ƻ 310 Ƽ 311 ƽ 312 ƾ 313 ƿ 314 ǀ 315 ǁ 316 ǂ 317 ǃ 318 Ǆ 319
ǅ 320 ǆ 321 Ǉ 322 ǈ 323 ǉ 324 Ǌ 325 ǋ 326 ǌ 327 Ǎ 328 ǎ 329 Ǐ 330 ǐ 331 Ǒ 332 ǒ 333 Ǔ 334 ǔ 335 Ǖ 336 ǖ 337 Ǘ 338 ǘ 339
Ǚ 340 ǚ 341 Ǜ 342 ǜ 343 ǝ 344 Ǟ 345 ǟ 346 Ǡ 347 ǡ 348 Ǣ 349 ǣ 350 Ǥ 351 ǥ 352 Ǧ 353 ǧ 354 Ǩ 355 ǩ 356 Ǫ 357 ǫ 358 Ǭ 359
ǭ 360 Ǯ 361 ǯ 362 ǰ 363 Ǳ 364 ǲ 365 ǳ 366 Ǵ 367 ǵ 368 Ƕ 369 Ƿ 370 Ǹ 371 ǹ 372 Ǻ 373 ǻ 374 Ǽ 375 ǽ 376 Ǿ 377 ǿ 378 Ȁ 379
ȁ 380 Ȃ 381 ȃ 382 Ȅ 383 ȅ 384 Ȇ 385 ȇ 386 Ȉ 387 ȉ 388 Ȋ 389 ȋ 390 Ȍ 391 ȍ 392 Ȏ 393 ȏ 394 Ȑ 395 ȑ 396 Ȓ 397 ȓ 398 Ȕ 399
ȕ 400 Ȗ 401 ȗ 402 Ș 403 ș 404 Ț 405 ț 406 Ȝ 407 ȝ 408 Ȟ 409 ȟ 410 Ƞ 411 ȡ 412 Ȣ 413 ȣ 414 Ȥ 415 ȥ 416 Ȧ 417 ȧ 418 Ȩ 419
ȩ 420 Ȫ 421 ȫ 422 Ȭ 423 ȭ 424 Ȯ 425 ȯ 426 Ȱ 427 ȱ 428 Ȳ 429 ȳ 430 ȴ 431 ȵ 432 ȶ 433 ȷ 434 ȸ 435 ȹ 436 Ⱥ 437 Ȼ 438 ȼ 439
Ƚ 440 Ⱦ 441 ȿ 442 ɀ 443 Ɂ 444 ɂ 445 Ƀ 446 Ʉ 447 Ʌ 448 Ɇ 449 ɇ 450 Ɉ 451 ɉ 452 Ɋ 453 ɋ 454 Ɍ 455 ɍ 456 Ɏ 457 ɏ 458 Ḁ 459
ḁ 460 Ḃ 461 ḃ 462 Ḅ 463 ḅ 464 Ḇ 465 ḇ 466 Ḉ 467 ḉ 468 Ḋ 469 ḋ 470 Ḍ 471 ḍ 472 Ḏ 473 ḏ 474 Ḑ 475 ḑ 476 Ḓ 477 ḓ 478 Ḕ 479
ḕ 480 Ḗ 481 ḗ 482 Ḙ 483 ḙ 484 Ḛ 485 ḛ 486 Ḝ 487 ḝ 488 Ḟ 489 ḟ 490 Ḡ 491 ḡ 492 Ḣ 493 ḣ 494 Ḥ 495 ḥ 496 Ḧ 497 ḧ 498 Ḩ 499
ḩ 500 Ḫ 501 ḫ 502 Ḭ 503 ḭ 504 Ḯ 505 ḯ 506 Ḱ 507 ḱ 508 Ḳ 509 ḳ 510 Ḵ 511 ḵ 512 Ḷ 513 ḷ 514 Ḹ 515 ḹ 516 Ḻ 517 ḻ 518 Ḽ 519
ḽ 520 Ḿ 521 ḿ 522 Ṁ 523 ṁ 524 Ṃ 525 ṃ 526 Ṅ 527 ṅ 528 Ṇ 529 ṇ 530 Ṉ 531 ṉ 532 Ṋ 533 ṋ 534 Ṍ 535 ṍ 536 Ṏ 537 ṏ 538 Ṑ 539
ṑ 540 Ṓ 541 ṓ 542 Ṕ 543 ṕ 544 Ṗ 545 ṗ 546 Ṙ 547 ṙ 548 Ṛ 549 ṛ 550 Ṝ 551 ṝ 552 Ṟ 553 ṟ 554 Ṡ 555 ṡ 556 Ṣ 557 ṣ 558 Ṥ 559
ṥ 560 Ṧ 561 ṧ 562 Ṩ 563 ṩ 564 Ṫ 565 ṫ 566 Ṭ 567 ṭ 568 Ṯ 569 ṯ 570 Ṱ 571 ṱ 572 Ṳ 573 ṳ 574 Ṵ 575 ṵ 576 Ṷ 577 ṷ 578 Ṹ 579
ṹ 580 Ṻ 581 ṻ 582 Ṽ 583 ṽ 584 Ṿ 585 ṿ 586 Ẁ 587 ẁ 588 Ẃ 589 ẃ 590 Ẅ 591 ẅ 592 Ẇ 593 ẇ 594 Ẉ 595 ẉ 596 Ẋ 597 ẋ 598 Ẍ 599
ẍ 600 Ẏ 601 ẏ 602 Ẑ 603 ẑ 604 Ẓ 605 ẓ 606 Ẕ 607 ẕ 608 ẖ 609 ẗ 610 ẘ 611 ẙ 612 ẚ 613 ẛ 614 ẜ 615 ẝ 616 ẞ 617 ẟ 618 Ạ 619
ạ 620 Ả 621 ả 622 Ấ 623 ấ 624 Ầ 625 ầ 626 Ẩ 627 ẩ 628 Ẫ 629 ẫ 630 Ậ 631 ậ 632 Ắ 633 ắ 634 Ằ 635 ằ 636 Ẳ 637 ẳ 638 Ẵ 639
ẵ 640 Ặ 641 ặ 642 Ẹ 643 ẹ 644 Ẻ 645 ẻ 646 Ẽ 647 ẽ 648 Ế 649 ế 650 Ề 651 ề 652 Ể 653 ể 654 Ễ 655 ễ 656 Ệ 657 ệ 658 Ỉ 659
ỉ 660 Ị 661 ị 662 Ọ 663 ọ 664 Ỏ 665 ỏ 666 Ố 667 ố 668 Ồ 669 ồ 670 Ổ 671 ổ 672 Ỗ 673 ỗ 674 Ộ 675 ộ 676 Ớ 677 ớ 678 Ờ 679
ờ 680 Ở 681 ở 682 Ỡ 683 ỡ 684 Ợ 685 ợ 686 Ụ 687 ụ 688 Ủ 689 ủ 690 Ứ 691 ứ 692 Ừ 693 ừ 694 Ử 695 ử 696 Ữ 697 ữ 698 Ự 699
ự 700 Ỳ 701 ỳ 702 Ỵ 703 ỵ 704 Ỷ 705 ỷ 706 Ỹ 707 ỹ 708 Ỻ 709 ỻ 710 Ỽ 711 ỽ 712 Ỿ 713 ỿ 714 ͻ 715 ͼ 716 ͽ 717 Ά 718 Έ 719
Α 720 Β 721 Γ 722 Δ 723 Ε 724 Ζ 725 Η 726 Θ 727 Ι 728 Κ 729 Λ 730 Μ 731 Ν 732 Ξ 733 Ο 734 Π 735 Ρ 736 Σ 737 Τ 738 Υ 739
Φ 740 Χ 741 Ψ 742 Ω 743 Ϋ 744 ά 745 έ 746 ή 747 ί 748 ΰ 749 α 750 β 751 γ 752 δ 753 ε 754 ζ 755 η 756 θ 757 ι 758 κ 759
λ 760 μ 761 ν 762 ξ 763 ο 764 π 765 ρ 766 ς 767 σ 768 τ 769 υ 770 φ 771 χ 772 ψ 773 ϋ 774 ό 775 ύ 776 ώ 777 ϐ 778 ϑ 779
ϒ 780 ϔ 781 ϕ 782 ϖ 783 ϗ 784 Ϙ 785 ϙ 786 Ϛ 787 ϛ 788 Ϝ 789 ϝ 790 Ϟ 791 ϟ 792 Ϡ 793 ϡ 794 Ϣ 795 ϣ 796 Ϥ 797 ϥ 798 Ϧ 799
ϧ 800 Ϩ 801 ϩ 802 Ϫ 803 ϫ 804 Ϭ 805 ϭ 806 Ϯ 807 ϯ 808 ϰ 809 ϱ 810 ϲ 811 ϵ 812 Ϸ 813 ϸ 814 Ϲ 815 ϻ 816 ϼ 817 Ͻ 818 Ͼ 819
Ͽ 820 Ѐ 821 Ё 822 Ђ 823 Ѓ 824 Є 825 Ѕ 826 І 827 Ї 828 Ј 829 Љ 830 Њ 831 Ћ 832 Ќ 833 Ѝ 834 Ў 835 Џ 836 А 837 Б 838 В 839
Г 840 Д 841 Е 842 Ж 843 З 844 И 845 Й 846 К 847 Л 848 М 849 Н 850 О 851 П 852 Р 853 С 854 Т 855 У 856 Ф 857 Х 858 Ц 859
Ч 860 Ш 861 Щ 862 Ъ 863 Ы 864 Ь 865 Э 866 Ю 867 Я 868 а 869 б 870 в 871 г 872 д 873 е 874 ж 875 з 876 и 877 й 878 к 879
л 880 м 881 н 882 о 883 п 884 р 885 с 886 т 887 у 888 ф 889 х 890 ц 891 ч 892 ш 893 щ 894 ъ 895 ы 896 ь 897 э 898 ю 899
я 900 ѐ 901 ё 902 ђ 903 ѓ 904 є 905 ѕ 906 і 907 ї 908 ј 909 љ 910 њ 911 ћ 912 ќ 913 ѝ 914 ў 915 џ 916 ѡ 917 Ѣ 918 ѣ 919
ѥ 920 Ѧ 921 ѧ 922 Ѫ 923 ѫ 924 Ѱ 925 ѱ 926 Ѳ 927 ѳ 928 Ѵ 929 ѵ 930 Ѷ 931 ѷ 932 ѻ 933 ѽ 934 ѿ 935 Ҁ 936 ҁ 937 ҋ 938 Ҍ 939
ҍ 940 Ҏ 941 ҏ 942 Ґ 943 ґ 944 Ғ 945 ғ 946 Ҕ 947 ҕ 948 Җ 949 җ 950 Ҙ 951 ҙ 952 Қ 953 қ 954 Ҝ 955 ҝ 956 Ҟ 957 ҟ 958 Ҡ 959
ҡ 960 Ң 961 ң 962 Ҥ 963 ҥ 964 ҩ 965 Ҫ 966 ҫ 967 Ҭ 968 ҭ 969 Ү 970 ү 971 Ұ 972 ұ 973 Ҳ 974 ҳ 975 ҵ 976 Ҷ 977 ҷ 978 Ҹ 979
ҹ 980 Һ 981 һ 982 Ӏ 983 Ӂ 984 ӂ 985 Ӄ 986 ӄ 987 Ӆ 988 ӆ 989 Ӈ 990 ӈ 991 Ӊ 992 ӊ 993 Ӌ 994 ӌ 995 ӎ 996 Ӑ 997 ӑ 998 Ӓ 999
ӓ 1000 Ӕ 1001 ӕ 1002 Ӗ 1003 ӗ 1004 Ә 1005 ә 1006 Ӛ 1007 ӛ 1008 Ӝ 1009 ӝ 1010 Ӟ 1011 ӟ 1012 Ӡ 1013 ӡ 1014 Ӣ 1015 ӣ 1016
Ӥ 1017 ӥ 1018 Ӧ 1019 ӧ 1020 Ө 1021 ө 1022 Ӫ 1023 ӫ 1024 Ӭ 1025 ӭ 1026 Ӯ 1027 ӯ 1028 Ӱ 1029 ӱ 1030 Ӳ 1031 ӳ 1032 Ӵ 1033
ӵ 1034 Ӷ 1035 ӷ 1036 Ӹ 1037 ӹ 1038 Ӻ 1039 ӻ 1040 Ӽ 1041 ӽ 1042 Ӿ 1043 ӿ 1044
)

# FUNCTION: letters_to_numbers {{{
# Converts each character of input string into number 0..61
#
letters_to_numbers() {
    local letters="$1" l

    reply=( )

    if [[ "$letters" != [0-9a-zA-ZµºÀ-ÖØ-áãäæ-öøú-ɏḀ-ỿͻ-ͽΆΈΑ-ΡΣ-ΩΫ-ψϋ-ώϐ-ϒϔ-ϲϵϷ-Ϲϻ-ϿЀ-џѡ-ѣѥ-ѧѪѫѰ-ѷѻѽѿ-ҁҋ-ҥҩ-ҳҵ-һӀ-ӌӎӐ-ӿ]## ]]; then
        print "Incorrect character detected in: '$letters'. Gcode should consist only from a-z, A-Z, 0-9 characters, plus 759 unicode characters [µºÀ-ÖØ-áãäæ-öøú-ɏḀ-ỿͻ-ͽΆΈΑ-ΡΣ-ΩΫ-ψϋ-ώϐ-ϒϔ-ϲϵϷ-Ϲϻ-ϿЀ-џѡ-ѣѥ-ѧѪѫѰ-ѷѻѽѿ-ҁҋ-ҥҩ-ҳҵ-һӀ-ӌӎӐ-ӿ]"
        return 1
    fi

    integer number
    for l in "${(@s::)letters}"; do
        number="${characters_map[$l]}"
        reply+=( "$number" )
    done

    return 0
}
# }}}
# FUNCTION: numbers_to_letters {{{
# Converts array of numbers into string [0-9a-zA-Z<unicode chars>]+
numbers_to_letters() {
    REPLY=""
    integer i
    for i in "$@"; do
        if [[ "$i" -lt 0 || "$i" -gt 1023 ]]; then
            print "Incorrect number during character conversion: $i"
            return 1
        fi
        REPLY+="${characters[i+1]}"
    done

    return 0
}
# }}}
# FUNCTION: decode_gcode {{{
# Turns gcode into bits
decode_gcode() {
    local letters="$1"

    local -a bits
    local workingvar="$letters"
    while [ "${workingvar//0/}" != "" ]; do
        div2 "$workingvar"
        workingvar="${reply[1]}"
        bits=( "${reply[2]}" "${bits[@]}" )
        # print "After div $workingvar/${reply[2]}"
    done
    # print "Bits of the letters $letters are: ${(j::)bits[@]}"
    reply=( "${bits[@]}" )
}
# }}}
# FUNCTION: get_integer_from_base_1024 {{{
# Converts given base-1024 string into integer
# Warning: it tagets integer (signed), so
# the size of number is limited here (while
# decode_gcode generates series of bits of
# arbitrary length)
get_integer_from_base_1024() {
    local letters="$1"
    local -a bits
    local workingvar="$letters"

    # Get base-2 generated array consisting of 1 and 0
    while [ "${workingvar//0/}" != "" ]; do
        div2 "$workingvar"
        workingvar="${reply[1]}"
        bits=( "${reply[2]}" "${bits[@]}" )
    done

    # Now sum up the obtained 0 and 1
    integer i mul=1 size="${#bits}"
    REPLY="0"
    for (( i=size; i>=1; i-- )); do
        REPLY=$(( REPLY + bits[i]*mul ))
        mul=$(( mul * 2 ))
    done

    # TODO: detect overflow and other problems
    return 0
}
# }}}
# FUNCTION: encode_gcode_str01 {{{
# Takes string of 0 and 1 and encodes it to base-1024
# number expressed via 0-9a-zA-Z<Unicode chars>
#
encode_gcode_str01() {
    str_01_to_24-bit_pack_numbers "$1"
    encode_gcode_24-bit_pack_numbers "${reply[@]}"

}
# }}}
# FUNCTION: encode_gcode_arr01 {{{
# Takes array (positional parameters) of 0 and 1 and encodes
# it to base-1024 number expressed via 0-9a-zA-Z<Unicode chars>
#
encode_gcode_arr01() {
    arr_01_to_24-bit_pack_numbers "$@"
    encode_gcode_24-bit_pack_numbers "${reply[@]}"
}
# }}}
# FUNCTION: encode_gcode_24-bit_pack_numbers {{{
# Takes 24-bit pack numbers and encodes them to base-1024
# number expressed via 0-9a-zA-Z<Unicode chars>
#
encode_gcode_24-bit_pack_numbers() {
    local -a numbers
    numbers=( "$@" )

    local -a nums_base1024 workingvar
    workingvar=( "${numbers[@]}" )

    integer all_zero=1 i
    for i in "${workingvar[@]}"; do
        if [[ "$i" -ne 0 ]]; then
            all_zero=0
            break
        fi
    done

    while (( all_zero != 1 )); do
        div_24-bit_pack_numbers_1024 "${workingvar[@]}"
        workingvar=( "${reply[@]}" )
        nums_base1024=( "$REPLY" "${nums_base1024[@]}" )

        # Check if workingvar is all zero
        all_zero=1
        for i in "${workingvar[@]}"; do
            if [[ "$i" -ne 0 ]]; then
                all_zero=0
                break
            fi
        done
    done

    # print "Base1024 numbers of $str01 are: ${(j:,:)nums_base1024[@]}"
    numbers_to_letters "${nums_base1024[@]}" # Result in $REPLY
    reply=( "${nums_base1024[@]}" )          # Additional result
}
# }}}
# FUNCTION: div2 {{{
# $1 - gcode's letters
# $reply - ( "gcode's letters after division" "remainder 0 or 1" )
div2() {

    #
    # First translate the letters to numbers and put them into array
    #

    local letters="$1"
    local -a numbers
    letters_to_numbers "$letters" || return 1
    numbers=( "${reply[@]}" )

    #
    # Now operate on the array performing long-division
    #

    local -a result
    result=()

    integer prepared_for_division="${numbers[1]}" input
    for input in ${(@)numbers[2,-1]} 0; do
        integer quotient=prepared_for_division/2

        result+=( "$quotient" )

        integer recovered=$(( quotient*2 ))
        integer subtracted=prepared_for_division-recovered

        prepared_for_division=1024*subtracted+input
    done

    #
    # Now convert the result to letters
    #

    numbers_to_letters "${result[@]}" || return 2

    #
    # Return
    #

    reply=( "$REPLY" "$subtracted" )

    return 0
}
# }}}
# FUNCTION: str_01_to_24-bit_pack_numbers {{{
# Takes STRING of 0 and 1 and converts it to array of numbers
# that are 24-bit packs taken from right to left, from the string
#
str_01_to_24-bit_pack_numbers() {
    local -a bits
    bits=( "${(@s::)1}" )
    arr_01_to_24-bit_pack_numbers "${bits[@]}"

    return 0
}
# }}}
# FUNCTION: arr_01_to_24-bit_pack_numbers {{{
# Takes ARRAY (@) of 0 and 1 and converts it to array of numbers
# that are 24-bit packs taken from right to left, from the string
#
arr_01_to_24-bit_pack_numbers() {
    local -a bits pack numbers
    bits=( "$@" )
    integer count=0 i size="${#bits}"

    # Take packs of 8 bits, convert each to number and store in array
    for (( i=size; i>=1; i-- )); do
        pack=( "$bits[i]" "${pack[@]}" )
        count+=1
        (( count < 24 && i != 1 )) && continue
        count=0

        # Convert the max. 8 bit pack to number
        integer result=0 p
        for p in "${pack[@]}"; do
            result=result*2+p
        done

        numbers=( "$result" "${numbers[@]}" )
        pack=( )
    done

    reply=( "${numbers[@]}" )
    return 0
}
# }}}
# FUNCTION: div_24-bit_pack_numbers_1024 {{{
# $1 - series of 0 and 1
# $reply - ( "series of 0 and 1, result of division" "remainder 0 ... 61" )
div_24-bit_pack_numbers_1024() {
    local -a numbers
    numbers=( "$@" )

    # print "Dividing numbers: " "${numbers[@]}"

    #
    # Now operate on the array performing long-division
    #

    integer cur last
    cur=1
    last="${#numbers}"

    local -a result
    result=()

    integer prepared_for_division="${numbers[cur]}"
    while (( 1 )); do
        integer quotient=prepared_for_division/1024

        result+=( "$quotient" )

        integer recovered=$(( quotient*1024 ))
        integer subtracted=prepared_for_division-recovered

        cur+=1
        if (( cur > last )); then
            break
        fi

        prepared_for_division=16777216*subtracted+${numbers[cur]}
    done

    # print "Result of division: " "${result[@]}"
    # print "Remainder: $subtracted"

    #
    # Return
    #

    reply=( "${result[@]}" )
    REPLY="$subtracted"

    return 0
}
# }}}
# FUNCTION: convert_integer_to_base_1024 {{{
# Takes number in $1, returns [0-9a-zA-Z<unicode chars>]+
# - representation of the number in base-1024
#
convert_integer_to_base_1024() {
    integer number="$1"
    local -a digits

    integer new_number=number
    integer remainder
    while (( new_number != 0 )); do
        remainder=new_number%1024
        new_number=new_number/1024

        digits+=( "$remainder" )
    done

    [[ "${#digits}" -eq 0 ]] && digits+=( 0 )
    [[ "${#digits}" -eq 1 ]] && digits+=( 0 )
    [[ "${#digits}" -eq 2 ]] && digits+=( 0 )

    digits=( "${(Oa)digits[@]}" )

    numbers_to_letters "${digits[@]}"
}
# }}}

# vim:ft=zsh
