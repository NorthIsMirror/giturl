# $1 - bits decoded from zcode
# $REPLY = bits to skip
# $reply = ( file "" rev "" repo "" wordrev "" chksum "" site "" unused1 "" unused2 "" unused3 "" error "" )
process_meta_data() {
    local -a bits
    bits=( "$@" )
    integer size="$#"

    bits=( "${(Oa)bits[@]}" )
    local strbits="${(j::)bits}"
    integer init_len="${#strbits}"

    local -A decoded
    decoded=(
        file ""
        rev ""
        repo ""
        wordrev ""
        chksum ""
        site ""
        unused1 ""
        unused2 ""
        unused3 ""
        error ""
    )

    # Is there SS?
    if [ "${strbits[1,${#codes[ss]}]}" = "${codes[ss]}" ]; then
        strbits="${strbits[${#codes[ss]}+1,-1]}"
        # Is there immediate following SS?
        if [ "${strbits[1,${#codes[ss]}]}" = "${codes[ss]}" ]; then
            # We should skip one SS and there is nothing to decode
            REPLY="${#codes[ss]}"
            reply=( file "" rev "" repo "" wordrev "" chksum ""
                    site "" unused1 "" unused2 "" unused3 "" error "" )
            return 0
        fi

        #
        # Follows meta data, decode it
        #

        # keys of the 'decoded' hash
        local current_selector="error"
        integer trylen
        local mat trystr
        while (( 1 )); do
            mat=""
            for (( trylen=1; trylen <= 7; trylen ++ )); do
                # Take substring of len $trylen and check if
                # it matches any Huffman code
                trystr="${strbits[1,trylen]}"
                mat="${rcodes[$trystr]}"
                [ -n "$mat" ] && break
            done

            # General failure in decoding the string
            if [ -z "$mat" ]; then
                REPLY="-1"
                reply=( file "" rev "" repo "" wordrev "" chksum ""
                        site "" unused1 "" unused2 "" unused3 "" error "" )
                return 1
            fi

            # Skip decoded bits
            strbits="${strbits[trylen+1,-1]}"

            # Handle what has been matched, either selector or data
            case "$mat" in
                (ss)
                    break
                    ;;
                (file|rev|repo|wordrev|chksum|site)
                    current_selector="$mat"
                    ;;
                (unused1|unused2|unused3)
                    current_selector="$mat"
                    ;;
                (*)
                    [ "$current_selector" = "site" ] && mat="${rsites[$mat]}"
                    decoded[$current_selector]+="$mat"
                    ;;
            esac
        done

        REPLY="$(( init_len - ${#strbits} ))"
        reply=( "${(kv)decoded[@]}" )
    else
        # No meta data and no special ending of zekyll bits
        REPLY="0"
        reply=( file "" rev "" repo "" wordrev "" chksum ""
                site "" unused1 "" unused2 "" unused3 "" error "" )
    fi

    return 0
}

#
# Gets zekylls for given code ($1)
# Also gets meta data: rev, file, repo
# and puts it into $reply array
#
get_zekylls_for_code() {
    local zcode="$1"
    decode_zcode "$zcode"

    local -a bits
    bits=( "${reply[@]}" )

    process_meta_data "${bits[@]}"
    # $reply contains: ( file "" rev "" repo "" wordrev "" chksum "" site "" unused1 "" unused2 "" unused3 "" error "" )
    # $REPLY contains: number of final bits that contained the meta data
    local -a meta_reply
    meta_reply=( "${reply[@]}" )

    # Skip bits that were processed as meta data
    bits=( "${(@)bits[1,-1*REPLY-1]}" )

    # Two last bits here are version
    version=( "${(@)bits[-2,-1]}" )
    bits[-1]=()
    bits[-1]=()

    integer size="${#bits}"

    # Last zekyll from $reply is first zekyll
    # in ZKL_INDEX_ZEKYLLS, thus the size-i+1
    # Less significant bit is first zekyll
    integer i
    local zekylls
    for (( i=size; i>=1; i-- )); do
        if [ "${bits[i]}" = "1" ]; then
            zekylls+="${ZKL_INDEX_ZEKYLLS[size-i+1]}"
        fi
    done

    REPLY="$zekylls"
    reply=( "${meta_reply[@]}" )
}

# vim:ft=zsh
