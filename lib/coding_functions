# FUNCTION: process_meta_data {{{
# $1 - bits decoded from zcode
# $REPLY = bits to skip
# $reply = ( file "" rev "" repo "" wordrev "" chksum "" site "" site_inline "" flags "" unused1 "" unused3 "" error "" )
process_meta_data() {
    local -a bits
    bits=( "$@" )
    integer size="$#" inline=0

    bits=( "${(Oa)bits[@]}" )
    local strbits="${(j::)bits}"
    integer init_len="${#strbits}"

    local -A decoded
    decoded=(
        file ""
        rev ""
        repo ""
        wordrev ""
        chksum ""
        site ""
        site_inline ""
        flags ""
        unused1 ""
        unused3 ""
        error ""
    )

    # Is there SS?
    if [[ "${strbits[1,${#codes[ss]}]}" = "${codes[ss]}" ]]; then
        strbits="${strbits[${#codes[ss]}+1,-1]}"
        # Is there immediate following SS?
        if [[ "${strbits[1,${#codes[ss]}]}" = "${codes[ss]}" ]]; then
            # We should skip one SS and there is nothing to decode
            REPLY="${#codes[ss]}"
            reply=( file "" rev "" repo "" wordrev "" chksum "" site "" site_inline "" flags "" unused1 "" unused3 "" error "" )
            return 0
        fi

        #
        # Follows meta data, decode it
        #

        # keys of the 'decoded' hash
        local current_selector="error"
        integer trylen
        local mat trystr
        while (( 1 )); do
            mat=""
            for (( trylen=1; trylen <= 7; trylen ++ )); do
                # Take substring of len $trylen and check if
                # it matches any Huffman code
                trystr="${strbits[1,trylen]}"
                mat="${rcodes[$trystr]}"
                [ -n "$mat" ] && break
            done

            # General failure in decoding the string
            if [[ -z "$mat" ]]; then
                REPLY="-1"
                reply=( file "" rev "" repo "" wordrev "" chksum "" site "" site_inline "" flags "" unused1 "" unused3 "" error "" )
                return 1
            fi

            # Skip decoded bits
            strbits="${strbits[trylen+1,-1]}"

            # Handle what has been matched, either selector or data
            case "$mat" in
                (ss)
                    break
                    ;;
                (file|rev|repo|wordrev|chksum)
                    inline=0
                    current_selector="$mat"
                    ;;
                (site_flags)
                    [[ "$current_selector" = "site_flags" ]] && {
                        inline=1
                    } || {
                        inline=0
                        current_selector="$mat"
                    }
                    ;;
                (unused2|unused3)
                    inline=0
                    current_selector="$mat"
                    ;;
                (*)
                    [[ "$current_selector" = "site_flags" ]] && {
                        if (( inline )); then
                            decoded[site_inline]+="$mat"
                        else
                            if [[ ${characters[(i)$mat]} -gt ${characters[(i)3]} ]]; then
                                mat="${rsites_flags[$mat]}"
                                [[ -n "${decoded[flags]}" ]] && decoded[flags]+=","
                                decoded[flags]+="$mat"
                            else
                                mat="${rsites_flags[$mat]}"
                                decoded[site]="$mat"
                            fi
                        fi
                    } || {
                        decoded[$current_selector]+="$mat"
                    }
                    ;;
            esac
        done

        REPLY="$(( init_len - ${#strbits} ))"
        reply=( "${(kv)decoded[@]}" )
    else
        # No meta data and no special ending of zekyll bits
        REPLY="0"
        reply=( file "" rev "" repo "" wordrev "" chksum "" site_flags "" unused1 "" unused3 "" error "" )
    fi

    return 0
}
# }}}
# FUNCTION: get_code_data {{{
#
# Gets meta data: rev, file, repo and puts it into $reply array
# REPLY has the revision bits
get_code_data() {
    local zcode="$1"
    decode_zcode "$zcode"

    local -a bits
    bits=( "${reply[@]}" )

    process_meta_data "${bits[@]}"
    # $reply contains: ( file "" rev "" repo "" wordrev "" chksum "" site_flags "" unused1 "" unused3 "" error "" )
    # $REPLY contains: number of final bits that contained the meta data
    local -a meta_reply
    meta_reply=( "${reply[@]}" )

    # Skip bits that were processed as meta data
    bits=( "${(@)bits[1,-1*REPLY-1]}" )

    # Two last bits here are version
    version=( "${(@)bits[-2,-1]}" )
    bits[-1]=()
    bits[-1]=()

    integer size="${#bits}"

    REPLY="${bits[*]}"
    reply=( "${meta_reply[@]}" )
}
# }}}
# FUNCTION: bits_start {{{
bits_start() {
    reply=( "${(@s::)codes[ss]}" )
}
# }}}
# FUNCTION: bits_stop {{{
bits_stop() {
    reply=( "${(@s::)codes[ss]}" )
}
# }}}
# FUNCTION: bits_rev {{{
bits_rev() {
    local -a bits
    local rev="$1"

    for lt in "${(@s::)rev}"; do
        if [[ -n "${codes[$lt]}" ]];then
            bits+=( "${(@s::)codes[$lt]}" )
        elif [[ -n "$lt" ]]; then
            SetMessage "Incorrect character in rev name: '$lt', trying to continue"
        fi
    done

    # Rev preamble
    if [[ "${#bits}" -gt "0" ]]; then
        bits=( "${(@s::)codes[rev]}" "${bits[@]}" )
    fi

    reply=( "${bits[@]}" )
    return 0
}
# }}}
# FUNCTION: bits_path {{{
bits_path() {
    local -a bits
    local file="$1"

    for lt in "${(@s::)file}"; do
        if [[ -n "${codes[$lt]}" ]];then
            bits+=( "${(@s::)codes[$lt]}" )
        elif [[ -n "$lt" ]]; then
            SetMessage "Incorrect character in file name: '$lt', trying to continue"
        fi
    done

    # File preamble
    if [[ "${#bits}" -gt "0" ]]; then
        bits=( "${(@s::)codes[file]}" "${bits[@]}" )
    fi

    reply=( "${bits[@]}" )
    return 0
}
# }}}
# FUNCTION: bits_repo {{{
bits_repo() {
    local -a bits
    local repo="$1"

    for lt in "${(@s::)repo}"; do
        if [[ -n "${codes[$lt]}" ]]; then
            bits+=( "${(@s::)codes[$lt]}" )
        elif [[ -n "$lt" ]]; then
            SetMessage "Incorrect character in repo name: '$lt', trying to continue"
        fi
    done

    # Repo preamble
    if [[ "${#bits}" -gt "0" ]]; then
        bits=( "${(@s::)codes[repo]}" "${bits[@]}" )
    fi

    reply=( "${bits[@]}" )
    return 0
}
# }}}
# FUNCTION: bits_site_flags {{{
bits_site_flags() {
    local -a bits
    local site="$1" lt

    reply=()

    #
    # Flags - the protocol
    #

    local proto_lt="${sites_flags[$proto]}"
    [[ -n "$proto_lt" ]] && bits+=( "${(@s::)codes[$proto_lt]}" )

    #
    # Site
    #

    integer skip=0
    if [[ -n "${server_site[$site]}" ]]; then
        site="${server_site[$site]}"
    else
        skip=1
    fi

    if (( skip )); then
        # Repeated site_flags preamble indicating inline-site
        bits+=( "${(@s::)codes[site_flags]}" )
        for lt in "${(@s::)site}"; do
            if [[ -n "${codes[$lt]}" ]];then
                bits+=( "${(@s::)codes[$lt]}" )
            elif [[ -n "$lt" ]]; then
                SetMessage "Incorrect character in server-part of URL: '$lt', trying to continue"
            fi
        done
    else
        # Github is the default site
        [[ "$site" = "gh" ]] && skip=1

        local site_lt="${sites_flags[$site]}"
        [[ -z "$site_lt" ]] && skip=1

        (( skip )) || bits+=( "${(@s::)codes[$site_lt]}" )
    fi

    #
    # Site preamble
    #

    (( ${#bits} > 0 )) && bits=( "${(@s::)codes[site_flags]}" "${bits[@]}" )
    
    reply=( "${bits[@]}" )
    return 0
}
# }}}
# FUNCTION: bits_compare_suffix {{{
bits_compare_suffix() {
    local -a long_bits short_bits
    long_bits=( "${(@s::)1}" )
    short_bits=( "${(@s::)2}" )

    if [[ "${#long_bits}" -lt "${#short_bits}" ]]; then
        return 1
    fi

    # Check if short_bits occur at the end of long_bits
    integer beg_idx=$(( ${#long_bits} - ${#short_bits} + 1 ))
    integer end_idx="${#long_bits}"
    integer l not_equal=0 s=1
    for (( l=beg_idx; l <= end_idx; l++ )); do
        if [[ "${long_bits[l]}" != "${short_bits[s]}" ]]; then
            not_equal=1
            break
        fi
        s+=1
    done

    return $not_equal
}
# }}}
# FUNCTION: bits_remove_if_start_stop {{{
bits_remove_if_start_stop() {
    local -a appendix
    appendix=( "$@" )

    if bits_compare_suffix "${(j::)appendix}" "${codes[ss]}"; then
        integer end_idx=$(( ${#appendix} - ${#codes[ss]} ))
        appendix=( "${(@)appendix[1,end_idx]}" )

        if bits_compare_suffix "${(j::)appendix}" "${codes[ss]}"; then
            end_idx=$(( ${#appendix} - ${#codes[ss]} ))
            appendix=( "${(@)appendix[1,end_idx]}" )

            # Two consecutive SS bits occured, correct removal
        else
            # We couldn't remove second SS bits, so it means
            # that there is some meta data, and we should
            # restore already removed last SS bits
            appendix+=( "${(@s::)codes[ss]}" )
        fi
    else
        # This shouldn't happen, this function must be
        # called after adding SS bits
        reply=( "${appendix[@]}" )
        return 1
    fi

    reply=( "${appendix[@]}" )
    return 0
}
# }}}
# FUNCTION: build_code {{{
build_code() {
    local proto="$1" site="$2" repo="$3" rev="$4" file_path="$5"

    local -a bits
    bits=( 0 0 )    # version

    local -a appendix

    bits_start
    appendix+=( "${reply[@]}" )

    bits_site_flags "$site" "$proto"
    appendix+=( "${reply[@]}" )

    bits_repo "$repo"
    appendix+=( "${reply[@]}" )

    bits_rev "$rev"
    appendix+=( "${reply[@]}" )

    bits_path "$file_path"
    appendix+=( "${reply[@]}" )

    bits_stop
    appendix+=( "${reply[@]}" )

    # Paranoid support for empty meta-data
    bits_remove_if_start_stop "${appendix[@]}"
    appendix=( "${reply[@]}" )

    if [[ "${#appendix}" = 0 ]]; then
        # Cannot happen (in-data SS bits at the end) with version bits 0,0
        local -a rev_bits
        rev_bits=( "${(@s::)codes['ss']}" )
        rev_bits=( "${(Oa)rev_bits[@]}" )
        if bits_compare_suffix "${(j::)bits}" "${(j::)rev_bits}"; then
            # No metadata but 'ss' at end – add another
            # one to mark that the 'ss' is a real data
            bits=( "${bits[@]}" "${rev_bits[@]}" )
        fi
    else
        appendix=( "${(Oa)appendix[@]}" )
        bits=( "${bits[@]}" "${appendix[@]}" )
    fi

    encode_zcode_arr01 "${bits[@]}"
}
# }}}

# vim:ft=zsh
